## Video game capstone project: Data manipulation (piece meal)
rm(list = ls()) ## Clear workspace
library(XML)
library(ggplot2)

## Downloaded xlsx with wget and converted with sed
ratings <- read.csv("capstone/research/gamedata.csv")
write.table(ratings, file="capstone/research/ratings.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
## Data manipulated with sed
## Example use in R: new.ratings <- gsub("PlayStation 3", "PS3", ratings)

r.ns <- readHTMLTable("http://www.gamerankings.com/sites/1188-ign/index.html?platform=124",
                      stringsAsFactors = FALSE)
names(r.ns) <- "NS"
write.table(r.ns, file = "capstone/research/NS.ratings.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
## Data manipulated with emacs

## Download Game Sales from website
u1 <- readHTMLTable("http://www.vgchartz.com/gamedb/?name=&publisher=&platform=&genre=&minSales=0&results=1000", stringsAsFactors = FALSE)
names(u1) <- c("Header", "Space", "Table", "Void")
game.sales <- u1$Table

## There are 158 pages. I need to run a loop to download them all, replacing the 'page=N'. I could try to paste it together.

for (i in 2:158){
    u <- paste("http://www.vgchartz.com/gamedb/?page=",i,
               "&results=1000&name=&platform=&minSales=0&publisher=&genre=&sort=GL", sep="")
    tmp.page <- readHTMLTable(u, stringsAsFactors = FALSE)
    if (length(names(tmp.page))==4){
        names(tmp.page) <- c("Header", "Space", "Table", "Void")
        game.sales <- rbind(game.sales, tmp.page$Table)
    }
    else next
}

game.sales$"North America" <- as.numeric(game.sales$"North America")
game.sales$"Europe"        <- as.numeric(game.sales$"Europe")
game.sales$"Japan"         <- as.numeric(game.sales$"Japan")
game.sales$"Rest of World" <- as.numeric(game.sales$"Rest of World")
game.sales$"Global"        <- as.numeric(game.sales$"Global")

save(game.sales, file="capstone/research/vgchart_gamesales.rda") ## Save initial data.frame

## Individual game metrics
load("capstone/research/vgchart_gamesales.rda")
## game.sales$Year <- as.numeric(game.sales$Year)
game.sales[game.sales==0]  <- NA
game.sales                 <- game.sales[complete.cases(game.sales),]

ratings     <- read.delim("capstone/research/ratings.tsv", stringsAsFactors = FALSE)
r.ns        <- read.delim("capstone/research/NS.ratings.tsv", stringsAsFactors = FALSE)
r.ns$Score  <- as.numeric(r.ns$Score)
r.ns        <- r.ns[,c(1,3,4,2)]
new.ratings <- rbind(ratings, r.ns)

sales.rating <- merge(new.ratings, game.sales, by = c("Game", "Platform"))
sales.rating <- subset(sales.rating, select=-Genre.x)

## Multi-platform check
mp <- vector()
for (i in 1:length(sales.rating$Game)){
    a = i
    b = i + 1
    c = i - 1
    if (a=="1"){
        tmp1 <- sales.rating$Game[a] == sales.rating$Game[b]
        mp <- c(mp, tmp1)
    }
    else if (a==length(sales.rating$Game)){
        tmp2 <- sales.rating$Game[a] == sales.rating$Game[c]
        mp <- c(mp, tmp2)
    }
    else {
        tmp3 <- (sales.rating$Game[a] == sales.rating$Game[b]) |
            (sales.rating$Game[a] == sales.rating$Game[c])
        mp <- c(mp, tmp3)
    }
}
mp[mp==TRUE]  <- "Yes"
mp[mp==FALSE] <- "No"
sales.rating[["Multi.Platform"]] <- mp

## Developers & Console Generations
dev.names1  <- c("Nintendo", "SEGA", rep("Nintendo", 4),
                rep("Sony",5), rep("Nintendo", 2), rep("Microsoft", 3))
dev.names2  <- c(rep("Nintendo", 3), "Sony", "Nintendo")
developer   <- sales.rating$Platform 

gen.names1  <- gen.names1 <- c("Gen 8", rep("Gen 6", 3), "Gen 5",
                              "Gen 9", "Gen 6", "Gen 7", "Gen 8",
                              "Gen 7", "Gen 8", "Gen 4", "Gen 8",
                              "Gen 7", "Gen 6", "Gen 8")
gen.names2  <- c("Gen 7", "Gen 5", "Gen 3", "Gen 5", "Gen 7")
generation  <- sales.rating$Platform 

plat.names1 <- sort(unique(developer))[-c(3,4,8,10,17)]
plat.names2 <- sort(unique(developer))[c(3,4,8,10,17)]

for (i in 1:length(plat.names1)){
    developer  <- gsub(plat.names1[i], dev.names1[i], developer)
    generation <- gsub(plat.names1[i], gen.names1[i], generation)
}

for (i in 1:length(plat.names2)){
    developer  <- gsub(plat.names2[i], dev.names2[i], developer)
    generation <- gsub(plat.names2[i], gen.names2[i], generation)
}

sales.rating[["Developer"]]  <- developer
sales.rating[["Generation"]] <- generation

save(sales.rating, file="capstone/research/vgsales_rating.rda")
load("capstone/research/vgsales_rating.rda")
## ## Statistics with ANOVA
## plat.rat <- aov(Score ~ Platform, data = sales.rating)
## genr.rat <- aov(Score ~ Genre.y, data = sales.rating)
## plgr.rat <- aov(Score ~ Platform * Genre.y, data = sales.rating)

## plat.sal <- aov(Global ~ Platform, data = sales.rating)
## genr.sal <- aov(Global ~ Genre.y, data = sales.rating)
## rat.sal  <- aov(Global ~ Score, data = sales.rating)

## ## Outliers in data
##########################################################################################

## Franchise information
library(plyr)
v1 <- "http://vgsales.wikia.com/wiki/Best_selling_game_franchises"
franchise <- readHTMLTable(v1, stringsAsFactors = FALSE)
names(franchise) <- c("100 million", "50 million", "20 million",
                      "10 million", "Highest-grossing", "Text1", "Text2", "Void")
fran.sales <- vector()
for (i in 1:4){
    tmp <- subset(ldply(franchise[i], data.frame), select=c(Franchise, Sales.millions.))
    fran.sales <- rbind(fran.sales, tmp)
}

## ## Best selling video game
## v2 <- "http://vgsales.wikia.com/wiki/Best_selling_games_worldwide"
## best <- readHTMLTable(v2, stringsAsFactors = FALSE)
## names(best) <- c("best-selling", "highest-grossing", "Text", "Void")

## ## Most expensive games
## v3 <- "http://vgsales.wikia.com/wiki/Most_expensive_games"
## expense <- readHTMLTable(v3, stringsAsFactors = FALSE)
## names(expense) <- c("50 million+", "text")

## Sub-categories of franchises
## Pokemon
f1 <- "http://vgsales.wikia.com/wiki/Pok%C3%A9mon#Pok.C3.A9mon_sales_figure"
pokemon <- readHTMLTable(f1, stringsAsFactors = FALSE)
names(pokemon) <- c("main", "spinoff", "mobile", "Text")

pke1 <- ldply(pokemon[1], data.frame)
colnames(pke1) <- c("ID", "Year", "Game", "Platform", "Sales.millions", "Notes")

pke2 <- ldply(pokemon[2], data.frame)
colnames(pke2) <- c("ID", "Year", "Platform", "Game", "Sales.millions", "Notes")
pke2 <- pke2[,c(1,2,4,3,5,6)]

pke.sales <- rbind(pke1, pke2)
pke.sales$Game <- gsub("Ã©", "e", pke.sales$Game)
write.table(pke.sales, file="capstone/research/pokemon.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
## Manipulated in Emacs
ratings     <- read.delim("capstone/research/ratings.tsv", stringsAsFactors = FALSE)
pokemon <- read.delim("capstone/research/pokemon.tsv", stringsAsFactors=FALSE)
pokemon <- subset(pokemon, select=-Notes)
pke <- merge(ratings, pokemon, by = c("Game", "Platform"))
save(pke, file="capstone/research/pokemon.rda")
load("capstone/research/pokemon.rda")
## Sonic (the Hedgehog)
f2 <- "http://vgsales.wikia.com/wiki/Sonic"
sonic <- readHTMLTable(f2, stringsAsFactors = FALSE)
ratings     <- read.delim("capstone/research/ratings.tsv", stringsAsFactors = FALSE)
names(sonic) <- c("main", "text")
son <- ldply(sonic[1], data.frame)
colnames(son) <- c("ID", "Year", "Platform", "Game", "Sales.millions", "Notes")
son$Sales.millions <- as.numeric(son$Sales.millions)
son <- son[,c(1,2,4,3,5,6)]
sth <- merge(ratings, son, by = c("Game"))
sth <- subset(sth, select=-c(Notes, Platform.y))
names(sth)[2] <- "Platform"

## Mario
f3 <- "http://vgsales.wikia.com/wiki/Mario"
mario <- readHTMLTable(f3, stringsAsFactors = FALSE)
names(mario) <- c("main", "related", "gross", "text")
mario1 <- ldply(mario[1], data.frame)
colnames(mario1) <- c("ID", "Year", "Platform", "Game", "Sales.millions", "Notes")
mario1$Sales.millions <- as.numeric(mario1$Sales.millions)
mario.sales <- merge(ratings, mario1, by = c("Game"))
mario.sales <- subset(mario.sales, select=-c(Notes, Platform.y))
names(mario.sales)[2] <- "Platform"

## GTA (Grand Theft Auto)
f4 <- "http://vgsales.wikia.com/wiki/Grand_Theft_Auto"
gta <- readHTMLTable(f4, stringsAsFactors = FALSE)
names(gta) <- c("main", "text")
gta1 <- ldply(gta[1], data.frame)
colnames(gta1) <-  c("ID", "Year", "Platform", "Game", "Sales.millions")
write.table(gta1, file="capstone/research/gta.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
## Edit with Emacs
gta1 <- read.delim("capstone/research/gta.tsv", stringsAsFactors=FALSE)
gta.sales <- merge(ratings, gta1, by = c("Game", "Platform"))

## Wii Series
f5 <- "http://vgsales.wikia.com/wiki/Wii_Series"
wii <- readHTMLTable(f5, stringsAsFactors = FALSE)
names(wii) <- c("main", "text1", "void", "text2", "text3")
w <- ldply(wii[1], data.frame)
colnames(w) <- c("ID", "Year", "Game", "Sales.millions", "Notes")
w$Sales.millions <- as.numeric(w$Sales.millions)
w.sales <- merge(ratings, w, by = c("Game"))
w.sales <- subset(w.sales, select=-Notes)

## Combine into one list
franchise.list <- list(pke, sth, mario.sales, gta.sales, w.sales)
names(franchise.list) <- c("Pokemon", "Sonic", "Mario", "GTA", "Wii")
save(franchise.list, file="capstone/research/franchise.rda")
load("capstone/research/franchise.rda")

## ## Halo
## f6 <- "http://vgsales.wikia.com/wiki/Halo"
## halo <- readHTMLTable(f6, stringsAsFactors = FALSE)
## names(halo) <- c("sale", "text", "void")

## ## l <- "http://vgsales.wikia.com/wiki/PlayStation_4"
## ## vg.list <- readHTMLList(l)
## ## ps4.sale <- unlist(vg.list[14])

## by.Rplat  <- aggregate(Score ~ Platform, sales.rating, mean)
## by.Rgenre <- aggregate(Score ~ Genre.y, sales.rating, mean)
## by.Splat  <- aggregate(Global ~ Platform, sales.rating, mean)
## by.Sgenre <- aggregate(Global ~ Genre.y, sales.rating, mean)
