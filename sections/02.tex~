\chapter{Data manipulation}
\section{Units sold \& ratings}
The first thing I will do is use the vgcharts website to download units sold information. This along with the excel file with game ratings can be used to compare sales (units) and game rating\footnote{NS - Nintendo Switch, console games is not included in the game rating, so I have add them from the IGN rating website (genre unknown).}.

The \texttt{project.R} script first section details R parts of the analysis. \texttt{sed} and \texttt{grep} were used to edit information.

Example:
\begin{verbatim}
grep "PlayStation" ratings.tsv | head
sed -i 's/PlayStation 4/PS4/g' ratings.tsv
\end{verbatim}

Emacs was used to edit the much smaller NS.rating.tsv.

\begin{verbatim}
rm(list = ls()) ## Clear workspace
library(XML) ## Load XML library

ratings <- read.csv("capstone/research/gamedata.csv")
write.table(ratings, file="capstone/research/ratings.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
\end{verbatim}
Here, I would edit the ratings file with \texttt{sed} and \texttt{grep}.

\begin{verbatim}
r.ns <- readHTMLTable(paste("http://www.gamerankings.com/",
                            "sites/1188-ign/index.html?platform=124", sep=""),
                      stringsAsFactors = FALSE)
names(r.ns) <- "NS"
write.table(r.ns, file = "capstone/research/NS.ratings.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
\end{verbatim}
Here, I used Emacs to edit the NS (Nintendo Switch) file.

\begin{verbatim}
## Download Game Sales from website
u1 <- readHTMLTable(paste("http://www.vgchartz.com/gamedb/?name=&publisher=",
                          "&platform=&genre=&minSales=0&results=1000", sep=""),
                    stringsAsFactors = FALSE)
names(u1) <- c("Header", "Space", "Table", "Void")
game.sales <- u1$Table

for (i in 2:158){
    u <- paste("http://www.vgchartz.com/gamedb/?page=",i,
               "&results=1000&name=&platform=&minSales=0&publisher=&genre=&sort=GL", 
               sep="")
    tmp.page <- readHTMLTable(u, stringsAsFactors = FALSE)
    if (length(names(tmp.page))==4){
        names(tmp.page) <- c("Header", "Space", "Table", "Void")
        game.sales <- rbind(game.sales, tmp.page$Table)
    }
    else next
}

game.sales$"North America" <- as.numeric(game.sales$"North America")
game.sales$"Europe"        <- as.numeric(game.sales$"Europe")
game.sales$"Japan"         <- as.numeric(game.sales$"Japan")
game.sales$"Rest of World" <- as.numeric(game.sales$"Rest of World")
game.sales$"Global"        <- as.numeric(game.sales$"Global")

save(game.sales, file="capstone/research/vgchart_gamesales.rda") ## Save original
\end{verbatim}
Now that the two datasets have been downloaded, my next step is to merge them. I spent time changing Platform names (i.e. Nintendo Switch to NS and PlayStation 4 to PS4). As such, I will use both Game and Platform for my overlapping \texttt{merge}.

\begin{verbatim}
## Individual game metrics
load("capstone/research/vgchart_gamesales.rda")
## game.sales$Year <- as.numeric(game.sales$Year)
game.sales[game.sales==0]  <- NA
game.sales                 <- game.sales[complete.cases(game.sales),]

ratings     <- read.delim("capstone/research/ratings.tsv", stringsAsFactors = F)
r.ns        <- read.delim("capstone/research/NS.ratings.tsv", stringsAsFactors = F)
r.ns$Score  <- as.numeric(r.ns$Score)
r.ns        <- r.ns[,c(1,3,4,2)]
new.ratings <- rbind(ratings, r.ns)

sales.rating <- merge(new.ratings, game.sales, by = c("Game", "Platform"))
sales.rating <- subset(sales.rating, select=-Genre.x)
\end{verbatim}

After giving the data a quick look with \texttt{ggplot2}, I realize I also want to do the following:
\begin{enumerate}
\item Remove outliers from statistical analysis techniques like ANOVA.
\item Separate out multi-platform games
\item Separate out console developers
  \begin{itemize}
  \item Atari
  \item Microsoft
  \item Nintendo
  \item SEGA
  \item Sony
  \end{itemize}
\item Separate out Platforms by generation
\end{enumerate}

\subsection{Removing outliers}
There is a package "\texttt{outliers}" that has the function, \texttt{rm.outlier}.

This did not do what I wanted it to do. I'm not sure if I should remove the outliers at all now. Maybe too complicated to figure out right now. I will work around the outliers. If I must, I can use the franchise dataset instead of this one, or remove by hand outliers. I'm just not sure it will make a whole lot of difference to the statistical analysis.

\subsection{Multi-platform}
Here, I'd like to add a column with multi-platform information (yes, no). I need a code that looks to see if a game was released in more than one platform.
\begin{itemize}
\item loop (for-loop) using length of Game
\item reorder dataset via game title
\item if game title repeats, this is a multi-platform game
  \begin{itemize}
  \item compare n and n+1; n1==n2
  \item if they equal, then mark as yes
  \item but I would need to mark for both, or check up and down; n2==n1 or n2==n3
  \item will need special looks at the beginning and end (n1, n)
  \end{itemize}
\item make as own vector, then add vector to dataset as new column
\end{itemize}

First I check to see if the data is sorted.

\begin{verbatim}
tmp <- sales.rating$Game
tmp <- as.character(tmp)
is.unsorted(tmp) ## FALSE
\end{verbatim}
A false means that the data is sorted, so I can move on without reorganizing the dataset\footnote{It should be noted that I needed to transform the data into \emph{character}, otherwise \texttt{is.unsorted} comes back TRUE. This seems to be an issue because didn't import data with \texttt{stringsAsFactors} set.}.

\begin{verbatim}
## Multi-platform check
mp <- vector()
for (i in 1:length(sales.rating$Game)){
    a = i
    b = i + 1
    c = i - 1
    if (a=="1"){
        tmp1 <- sales.rating$Game[a] == sales.rating$Game[b]
        mp <- c(mp, tmp1)
    }
    else if (a==length(sales.rating$Game)){
        tmp2 <- sales.rating$Game[a] == sales.rating$Game[c]
        mp <- c(mp, tmp2)
    }
    else {
        tmp3 <- (sales.rating$Game[a] == sales.rating$Game[b]) |
            (sales.rating$Game[a] == sales.rating$Game[c])
        mp <- c(mp, tmp3)
    }
}
mp[mp==TRUE]  <- "Yes"
mp[mp==FALSE] <- "No"
sales.rating[["Multi.Platform"]] <- mp
\end{verbatim}
This gives me a yes/no column that I can use to subset the data later into multi-platform and single-platform release.

\subsection{Console Developers}
Now, I want to separate out the developers, or really group the games into 5 overall companies. First, I checked to see which platforms are in the dataset. There are 21 unique platforms:

\begin{itemize}
\item \textbf{Atari:} None
\item \textbf{Microsoft}
  \begin{enumerate}
  \item XB
  \item X360
  \item XOne
  \end{enumerate}
\item \textbf{Nintendo}
  \begin{enumerate}
  \item NES
  \item SNES
  \item N64
  \item GC
  \item Wii
  \item WiiU
  \item NS
  \item GB
  \item GBA
  \item DS
  \item 3DS
  \end{enumerate}
\item \textbf{SEGA:} DC
\item \textbf{Sony}
  \begin{enumerate}
  \item PS
  \item PS2
  \item PS3
  \item PS4
  \item PSP
  \item PSV
  \end{enumerate}
\end{itemize}
I can use \texttt{grep} functions within R, \texttt{gsub} to match and replace the above\footnote{Base package}. On second thought, I do not want to replace the Platform, but add a new column that uses the platform names to add the developer. I would export the Platform as vector, then replace that one, and add it back as a new column. Nevermind, \texttt{gsub} does not overwrite the file; however, I keep overwriting the file.

As I want to run in a loop, I need to figure out how to use with partial matches. The best idea I can come up with, without using the command line, is to creat two platform vectors: 1) unique strings, 2) the rest. This would mean removing: PS, GB, NES, DS, and Wii.

\begin{verbatim}
## Developers
dev.names1 <- c("Nintendo", "SEGA", rep("Nintendo", 4),
                rep("Sony",5), rep("Nintendo", 2), rep("Microsoft", 3))
dev.names2 <- c(rep("Nintendo", 3), "Sony", "Nintendo")
developer <- sales.rating$Platform 
plat.names1 <- sort(unique(developer))[-c(3,4,8,10,17)]
plat.names2 <- sort(unique(developer))[c(3,4,8,10,17)]

for (i in 1:length(plat.names1)){
    developer <- gsub(plat.names1[i], dev.names1[i], developer)
}

for (i in 1:length(plat.names2)){
    developer <- gsub(plat.names2[i], dev.names2[i], developer)
}

sales.rating[["Developer"]] <- developer
\end{verbatim}

\subsection{VG Generation}
There are roughly 8 generations of console video games with the Nintendo Switch a Gen 9 release. Below is where my overlapping Platforms lay:

\begin{enumerate}
\item \textbf{Gen 1:} None
\item \textbf{Gen 2:} None
\item \textbf{Gen 3}
  \begin{itemize}
  \item NES
  \end{itemize}
\item \textbf{Gen 4}
  \begin{itemize}
  \item SNES
  \end{itemize}
\item \textbf{Gen 5}
  \begin{itemize}
  \item GB
  \item N64
  \item PS
  \end{itemize}
\item \textbf{Gen 6}
  \begin{itemize}
  \item DC
  \item GBA
  \item GC
  \item PS2
  \item XB
  \end{itemize}
\item \textbf{Gen 7}
  \begin{itemize}
  \item DS
  \item PS3
  \item PSP
  \item Wii
  \item X360
  \end{itemize}
\item \textbf{Gen 8}
  \begin{itemize}
  \item 3DS
  \item PS4
  \item PSV
  \item WiiU
  \item XOne
  \end{itemize}
\item \textbf{Gen 9}
  \begin{itemize}
  \item NS
  \end{itemize}
\end{enumerate}

\begin{verbatim}
## Console Generations
gen.names1 <- gen.names1 <- c("Gen 8", rep("Gen 6", 3), "Gen 5",
                              "Gen 9", "Gen 6", "Gen 7", "Gen 8",
                              "Gen 7", "Gen 8", "Gen 4", "Gen 8",
                              "Gen 7", "Gen 6", "Gen 8")
gen.names2 <- c("Gen 7", "Gen 5", "Gen 3", "Gen 5", "Gen 7")
generation <- sales.rating$Platform 

for (i in 1:length(plat.names1)){
    generation <- gsub(plat.names1[i], gen.names1[i], generation)
}

for (i in 1:length(plat.names2)){
    generation <- gsub(plat.names2[i], gen.names2[i], generation)
}

sales.rating[["Generation"]] <- generation
\end{verbatim}
This uses the \texttt{developer} defined platform names. As such, I can combine the two \texttt{for-loops}.

\begin{verbatim}
## Developers & Console Generations
dev.names1  <- c("Nintendo", "SEGA", rep("Nintendo", 4),
                rep("Sony",5), rep("Nintendo", 2), rep("Microsoft", 3))
dev.names2  <- c(rep("Nintendo", 3), "Sony", "Nintendo")
developer   <- sales.rating$Platform 

gen.names1  <- gen.names1 <- c("Gen 8", rep("Gen 6", 3), "Gen 5",
                              "Gen 9", "Gen 6", "Gen 7", "Gen 8",
                              "Gen 7", "Gen 8", "Gen 4", "Gen 8",
                              "Gen 7", "Gen 6", "Gen 8")
gen.names2  <- c("Gen 7", "Gen 5", "Gen 3", "Gen 5", "Gen 7")
generation  <- sales.rating$Platform 

plat.names1 <- sort(unique(developer))[-c(3,4,8,10,17)]
plat.names2 <- sort(unique(developer))[c(3,4,8,10,17)]

for (i in 1:length(plat.names1)){
    developer  <- gsub(plat.names1[i], dev.names1[i], developer)
    generation <- gsub(plat.names1[i], gen.names1[i], generation)
}

for (i in 1:length(plat.names2)){
    developer  <- gsub(plat.names2[i], dev.names2[i], developer)
    generation <- gsub(plat.names2[i], gen.names2[i], generation)
}

sales.rating[["Developer"]]  <- developer
sales.rating[["Generation"]] <- generation
\end{verbatim}

\section{Franchising}
