\chapter{Datasets}

Website for data import, wrangling and visualization in R: \href{http://www.computerworld.com/article/2921176/business-intelligence/great-r-packages-for-data-import-wrangling-visualization.html}{computerworld}.\\

\section{Healthcare}
Key website for health data: \href{https://www.nlm.nih.gov/hsrinfo/datasites.html}{HSRIC}.\\
\subsection{Behavioral Risk Factor}
The data can be downloaded as csv file:
\begin{enumerate}
\item \href{https://chronicdata.cdc.gov/api/views/xuxn-8kju/rows.csv?accessType=DOWNLOAD}{life-quality}. Health related quality of life survey.
\item \href{https://chronicdata.cdc.gov/api/views/hn4x-zwk7/rows.csv?accessType=DOWNLOAD}{nutrition}. Very recent data.
\item \href{ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/CHDI/chsi_dataset.zip}{indicators}. This is a zipped file. 
\end{enumerate}

\textbf{Note:} There is metadata (json) for the above datasets.

I'm not going to want to save this data to my hard drive, at least not initially. So I can use R packages to download directly from the website.

Example:
\begin{verbatim}
library(data.table)
mydat <- fread("https://website.url.here")
\end{verbatim}

\subsection{Healthcare Spending}

\begin{enumerate}
\item \href{https://meps.ahrq.gov/mepsweb/data_stats/download_data_files.jsp}{raw data}. This is in json.
\item \href{https://aspe.hhs.gov/system/files/aspe-files/253321/dec2016statebystate.xlsx}{ACA}. This is xlsx file.
\item \href{http://www.commonwealthfund.org/~/media/Files/2017%20State%20Scorecard/Public%20Use%20File/2017_state_scorecard_public_use_data_file.xlsx}{state performance}. This is also xlsx file. 
\end{enumerate}

\section{Video Gaming}
Changing topics to video gaming, but don't want to lose the information above.

I first download the available excel file for game rating, and convert to csv. Next, I need the sales data for these games.

Below are the datasets including game ratings and unit sales. Furthermore, I have additional datasets for franchise information and best-selling video game based on money earned and not units sold. This is a significantly smaller dataset.

\begin{enumerate}
\item \href{http://www.gamerankings.com/sites/1188-ign/index.html?platform=116}{game rankings}
\item \href{http://www.vgchartz.com/gamedb/?name=&publisher=&platform=&genre=&minSales=0&results=1000}{game database}
\item \href{https://www.dropbox.com/s/09sh15zbtwg9eu3/gamedata.xlsx}{xlsx game ranking}
\item \href{http://vgsales.wikia.com/wiki/Video_Game_Sales_Wiki}{vg wiki}
  \begin{enumerate}
  \item \href{http://vgsales.wikia.com/wiki/Best_selling_game_franchises}{highest franchises}
  \item \href{http://vgsales.wikia.com/wiki/Best_selling_games_worldwide}{best-selling vg}
  \item \href{http://vgsales.wikia.com/wiki/Most_expensive_games}{most expensive vg}
  \item \href{http://vgsales.wikia.com/wiki/Pok%C3%A9mon#Pok.C3.A9mon_sales_figure}{pokemon}
  \item \href{http://vgsales.wikia.com/wiki/Sonic}{sonic the hedgehog}
  \item \href{http://vgsales.wikia.com/wiki/Mario}{mario}
  \item \href{http://vgsales.wikia.com/wiki/Grand_Theft_Auto}{gta: grand theft auto}
  \item \href{http://vgsales.wikia.com/wiki/Halo}{halo}
  \end{enumerate}
\end{enumerate}

\chapter{Data manipulation}
\section{Units sold \& ratings}
The first thing I will do is use the vgcharts website to download units sold information. This along with the excel file with game ratings can be used to compare sales (units) and game rating\footnote{NS - Nintendo Switch, console games is not included in the game rating, so I have add them from the IGN rating website (genre unknown).}.

The \texttt{project.R} script first section details R parts of the analysis. \texttt{sed} and \texttt{grep} were used to edit information.

Example:
\begin{verbatim}
grep "PlayStation" ratings.tsv | head
sed -i 's/PlayStation 4/PS4/g' ratings.tsv
\end{verbatim}

Emacs was used to edit the much smaller NS.rating.tsv.

\begin{verbatim}
rm(list = ls()) ## Clear workspace
library(XML) ## Load XML library

ratings <- read.csv("capstone/research/gamedata.csv")
write.table(ratings, file="capstone/research/ratings.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
\end{verbatim}
Here, I would edit the ratings file with \texttt{sed} and \texttt{grep}.

\begin{verbatim}
r.ns <- readHTMLTable(paste("http://www.gamerankings.com/",
                            "sites/1188-ign/index.html?platform=124", sep=""),
                      stringsAsFactors = FALSE)
names(r.ns) <- "NS"
write.table(r.ns, file = "capstone/research/NS.ratings.tsv", sep="\t",
            append = FALSE, row.names = FALSE, col.names = TRUE)
\end{verbatim}
Here, I used Emacs to edit the NS (Nintendo Switch) file.

\begin{verbatim}
## Download Game Sales from website
u1 <- readHTMLTable(paste("http://www.vgchartz.com/gamedb/?name=&publisher=",
                          "&platform=&genre=&minSales=0&results=1000", sep=""),
                    stringsAsFactors = FALSE)
names(u1) <- c("Header", "Space", "Table", "Void")
game.sales <- u1$Table

for (i in 2:158){
    u <- paste("http://www.vgchartz.com/gamedb/?page=",i,
               "&results=1000&name=&platform=&minSales=0&publisher=&genre=&sort=GL", 
               sep="")
    tmp.page <- readHTMLTable(u, stringsAsFactors = FALSE)
    if (length(names(tmp.page))==4){
        names(tmp.page) <- c("Header", "Space", "Table", "Void")
        game.sales <- rbind(game.sales, tmp.page$Table)
    }
    else next
}

game.sales$"North America" <- as.numeric(game.sales$"North America")
game.sales$"Europe"        <- as.numeric(game.sales$"Europe")
game.sales$"Japan"         <- as.numeric(game.sales$"Japan")
game.sales$"Rest of World" <- as.numeric(game.sales$"Rest of World")
game.sales$"Global"        <- as.numeric(game.sales$"Global")

save(game.sales, file="capstone/research/vgchart_gamesales.rda") ## Save original
\end{verbatim}
Now that the two datasets have been downloaded, my next step is to merge them. I spent time changing Platform names (i.e. Nintendo Switch to NS and PlayStation 4 to PS4). As such, I will use both Game and Platform for my overlapping \texttt{merge}.

\begin{verbatim}
## Individual game metrics
load("capstone/research/vgchart_gamesales.rda")
## game.sales$Year <- as.numeric(game.sales$Year)
game.sales[game.sales==0]  <- NA
game.sales                 <- game.sales[complete.cases(game.sales),]

ratings     <- read.delim("capstone/research/ratings.tsv", stringsAsFactors = F)
r.ns        <- read.delim("capstone/research/NS.ratings.tsv", stringsAsFactors = F)
r.ns$Score  <- as.numeric(r.ns$Score)
r.ns        <- r.ns[,c(1,3,4,2)]
new.ratings <- rbind(ratings, r.ns)

sales.rating <- merge(new.ratings, game.sales, by = c("Game", "Platform"))
sales.rating <- subset(sales.rating, select=-Genre.x)
\end{verbatim}

After giving the data a quick look with \texttt{ggplot2}, I realize I also want to do the following:
\begin{enumerate}
\item Remove outliers from statistical analysis techniques like ANOVA.
\item Separate out multi-platform games
\item Separate out console developers
  \begin{itemize}
  \item Atari
  \item Microsoft
  \item Nintendo
  \item SEGA
  \item Sony
  \end{itemize}
\item Separate out Platforms by generation
\end{enumerate}

\subsection{Removing outliers}
There is a package "\texttt{outliers}" that has the function, \texttt{rm.outlier}.

This did not do what I wanted it to do. I'm not sure if I should remove the outliers at all now. Maybe too complicated to figure out right now. I will work around the outliers. If I must, I can use the franchise dataset instead of this one, or remove by hand outliers. I'm just not sure it will make a whole lot of difference to the statistical analysis.

\subsection{Multi-platform}
Here, I'd like to add a column with multi-platform information (yes, no). I need a code that looks to see if a game was released in more than one platform.
\begin{itemize}
\item loop (for-loop) using length of Game
\item reorder dataset via game title
\item if game title repeats, this is a multi-platform game
  \begin{itemize}
  \item compare n and n+1; n1==n2
  \item if they equal, then mark as yes
  \item but I would need to mark for both, or check up and down; n2==n1 or n2==n3
  \item will need special looks at the beginning and end (n1, n)
  \end{itemize}
\item make as own vector, then add vector to dataset as new column
\end{itemize}

First I check to see if the data is sorted.

\begin{verbatim}
tmp <- sales.rating$Game
tmp <- as.character(tmp)
is.unsorted(tmp) ## FALSE
\end{verbatim}
A false means that the data is sorted, so I can move on without reorganizing the dataset\footnote{It should be noted that I needed to transform the data into \emph{character}, otherwise \texttt{is.unsorted} comes back TRUE. This seems to be an issue because didn't import data with \texttt{stringsAsFactors} set.}.

\begin{verbatim}
## Multi-platform check
mp <- vector()
for (i in 1:length(sales.rating$Game)){
    a = i
    b = i + 1
    c = i - 1
    if (a=="1"){
        tmp1 <- sales.rating$Game[a] == sales.rating$Game[b]
        mp <- c(mp, tmp1)
    }
    else if (a==length(sales.rating$Game)){
        tmp2 <- sales.rating$Game[a] == sales.rating$Game[c]
        mp <- c(mp, tmp2)
    }
    else {
        tmp3 <- (sales.rating$Game[a] == sales.rating$Game[b]) |
            (sales.rating$Game[a] == sales.rating$Game[c])
        mp <- c(mp, tmp3)
    }
}
mp[mp==TRUE]  <- "Yes"
mp[mp==FALSE] <- "No"
sales.rating[["Multi.Platform"]] <- mp
\end{verbatim}
This gives me a yes/no column that I can use to subset the data later into multi-platform and single-platform release.

\subsection{Console Developers}
Now, I want to separate out the developers, or really group the games into 5 overall companies.

\section{Franchising}

\chapter{Analysis}
\section{Units sold \& reviews}
\subsection{Statistics}

\subsection{Interactive graphs}

\section{Franchising}
